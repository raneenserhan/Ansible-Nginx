- hosts: localhost
  connection: local
  tasks:
    - name: create VPC
      ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ region }}"
        state: present
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: vpc
    
    - name: associate public subnet to the VPC
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        cidr: "{{ subnet_cidr }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        map_public: yes
        resource_tags:
           Name: "{{ subnet_name }}"
      register: subnet
    
    - name: create IntenetGateWay
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: "present"
        tags:
          Name: "{{ igw_name }}"
      register: igw
    
    - name: Route IGW
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id  }}"
        tags:
          Name: "{{ route_name }}"
    
    - name: Create Security Group
      ec2_group:
        name: "{{ securitygroup_name }}"
        description: allowed traffic Security Group
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
          - proto: tcp
            ports:
            - 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
            - 22
            cidr_ip: 0.0.0.0/0
      register: security_group
    
    - name: create a new ec2 key pair
      ec2_key:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: "{{ keypair_name }}"
        region: "{{ region }}"
      register: keypair
      
    
    - name: Copy EC2 Private Key locally so it can be later on used to SSH into the instance
      copy: content="{{ keypair.key.private_key }}" dest=.ssh/key.ppk
      when: keypair.changed == true
    
    - name: Create EC2 server
      ec2:
        image: "{{ image }}"
        wait: yes
        instance_type: " {{server_type }}"
        region: "{{ region }}"
        group_id: "{{ security_group.group_id }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        key_name: "{{ keypair.key.name  }}"
        user_data: "#!/bin/bash \n sudo apt update -y \n sudo apt install -y docker.io  \n sudo docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx"        
        count_tag:
          Name: nginxserver
        exact_count: 1
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"